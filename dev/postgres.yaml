apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: funnelai-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: funnelai-postgresql-secret
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: funnelai-postgresql-secret
                  key: password
            - name: POSTGRES_DB
              value: alertsDB
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: funnelai-dev
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: timescale-config
  namespace: funnelai-dev
data:
  timescale-config.sql: |
    -- Create timescaledb extension
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;

    -- Create a hypertable for ingesting alerts
    CREATE TABLE IF NOT EXISTS alerts (
      timestamp TIMESTAMPTZ NOT NULL,
      alert_type TEXT,
      -- other columns as needed
    );

    SELECT create_hypertable('alerts', 'timestamp');
---
apiVersion: batch/v1
kind: Job
metadata:
  name: timescale-config-job
  namespace: funnelai-dev
spec:
  template:
    spec:
      containers:
      - name: timescale-config-job
        image: postgres:latest
        command: ["/bin/sh", "-c", "psql -h postgres-service -U POSTGRES_USER -d POSTGRES_DB < /config/timescale-config.sql"]
        volumeMounts:
          - name: config-volume
            mountPath: /config
      restartPolicy: OnFailure
      volumes:
        - name: config-volume
          configMap:
            name: timescale-config
